pipeline {
    agent any

    environment {
        SONARQUBE_ENV = 'SonarQube'
        KUBECONFIG = '/var/jenkins_home/kubeconfig.yaml'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'üßπ Cleaning workspace before fresh checkout...'
                deleteDir()
                echo 'üîÑ Cloning source code...'
                checkout scm
            }
        }

        stage('Setup Docker CLI') {
            steps {
                sh '''
                    if ! command -v docker > /dev/null; then
                        echo "üì¶ Installing Docker CLI..."
                        apt update && apt install -y docker.io
                        echo "‚úÖ Docker CLI installed."
                    else
                        echo "‚úîÔ∏è Docker CLI already exists."
                    fi
                '''
            }
        }

        // stage('Run Unit Tests') {
        //     steps {
        //         echo 'üß™ Running Go unit tests...'
        //         checkout scm
        //         dir('app') {
        //             sh '''
        //                 docker run --rm -v $(pwd):/app -w /app golang:1.24 go test ./... -v
        //             '''
        //         }
        //     }
        // }

        stage('SonarQube Analysis') {
            steps {
                echo 'üìä Running SonarQube static code analysis...'
                dir('app') {
                    withSonarQubeEnv("${SONARQUBE_ENV}") {
                        sh '''
                            docker run --rm \
                              -v $(pwd):/usr/src \
                              -w /usr/src \
                              sonarsource/sonar-scanner-cli \
                              sonar-scanner \
                              -Dsonar.projectKey=go_project \
                              -Dsonar.sources=. \
                              -Dsonar.host.url=http://host.docker.internal:9000 \
                              -Dsonar.login=$SONAR_AUTH_TOKEN
                        '''
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'üê≥ Building Docker image...'
                dir('app') {
                    sh 'docker build -t goapp:latest .'
                }
            }
        }

        stage('Push Docker Image to DockerHub') {
            steps {
                echo '‚òÅÔ∏è Pushing Docker image to DockerHub...'
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        docker login -u $DOCKER_USER -p $DOCKER_PASS
                        docker tag goapp:latest $DOCKER_USER/goapp:latest
                        docker push $DOCKER_USER/goapp:latest
                    '''
                }
            }
        }

        stage('Verify Helm & Cluster') {
            steps {
                echo 'üîç Verifying Helm and Kubernetes connectivity...'
                sh '''
                    # ü™õ Install Helm if needed
                    if ! command -v helm > /dev/null; then
                        echo "‚ùå Helm not found. Installing..."
                        curl -sSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
                    else
                        echo "‚úîÔ∏è Helm already exists."
                        helm version
                    fi

                    # ü™õ Install kubectl if needed
                    if ! command -v kubectl > /dev/null; then
                        echo "‚ùå kubectl not found. Installing..."
                        ARCH=$(uname -m)
                        ARCH_TYPE="amd64"
                        if [ "$ARCH" = "arm64" ] || [ "$ARCH" = "aarch64" ]; then
                          ARCH_TYPE="arm64"
                        fi
                        VERSION=$(curl -sSL https://dl.k8s.io/release/stable.txt)
                        curl -LO https://dl.k8s.io/release/$VERSION/bin/linux/$ARCH_TYPE/kubectl
                        chmod +x kubectl && mv kubectl /usr/local/bin/
                        echo "‚úÖ kubectl installed."
                    else
                        echo "‚úîÔ∏è kubectl already exists."
                        kubectl version --client
                    fi

                    # ‚úÖ Confirm KUBECONFIG is a file
                    echo "üß™ Checking if KUBECONFIG is a valid file..."
                    if [ ! -f "$KUBECONFIG" ]; then
                        echo "‚ùå ERROR: $KUBECONFIG is not a file (maybe a dir or missing)"
                        ls -ld "$KUBECONFIG"
                        echo "üí° Tip: You may need to mount or copy kubeconfig into this path."
                        exit 1
                    else
                        echo "‚úÖ KUBECONFIG looks good."
                    fi

                    # üåê Test cluster connectivity
                    echo "üåê Checking cluster connectivity..."
                    kubectl get nodes || {
                        echo "‚ùå Cannot connect to Kubernetes cluster!"
                        exit 1
                    }
                '''
            }
        }

        stage('Deploy to Helm') {
            steps {
                echo 'üöÄ Deploying to Helm...'
                sh '''
                    helm upgrade --install goapp charts/goapp \
                      --namespace default \
                      --create-namespace \
                      --wait
                '''
            }
        }
    }

    post {
        success {
            echo 'üéâ Deployment pipeline completed successfully!'
        }
        failure {
            echo '‚ùå Deployment pipeline failed.'
        }
    }
}
