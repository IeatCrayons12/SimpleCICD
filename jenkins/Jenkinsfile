pipeline {
    agent any

    environment {
        SONARQUBE_ENV = 'SonarQube'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'üßπ Cleaning workspace before fresh checkout...'
                deleteDir()
                echo 'üîÑ Cloning source code...'
                checkout scm
            }
        }

        stage('Setup Docker CLI') {
            steps {
                sh '''
                    if ! command -v docker > /dev/null; then
                        echo "üì¶ Installing Docker CLI..."
                        apt update && apt install -y docker.io
                        echo "‚úÖ Docker CLI installed."
                    else
                        echo "‚úîÔ∏è Docker CLI already exists."
                    fi
                '''
            }
        }

        stage('Run Unit Tests') {
            agent {
                docker {
                    image 'golang:1.24'
                }
            }
            steps {
                echo 'üß™ Running Go unit tests...'
                checkout scm
                dir('app') {
                    sh 'go test ./... -v'
                }
            }
        }

        // üîí (Optional) Preserved for future use or recruiter showcase
        // stage('OWASP Dependency Check') {
        //     steps {
        //         echo 'üîç Running OWASP Dependency Check...'
        //         withCredentials([string(credentialsId: 'nvd-api-key-owasp', variable: 'NVD_API_KEY')]) {
        //             sh '''
        //                 docker run --rm \
        //                   -v $PWD/app:/src \
        //                   -v $PWD/app/odc-reports:/report \
        //                   -v $PWD/odc-data:/usr/share/dependency-check/data \
        //                   owasp/dependency-check \
        //                   --project "goapp" \
        //                   --scan /src \
        //                   --format HTML \
        //                   --out /report \
        //                   --nvdApiKey $NVD_API_KEY
        //             '''
        //         }
        //         archiveArtifacts artifacts: 'app/odc-reports/**/*.html', fingerprint: true
        //     }
        // }

        stage('Trivy Scan') {
            steps {
                echo 'üõ°Ô∏è Running Trivy vulnerability scan on Docker image...'
                sh '''
                    docker build -t goapp:latest ./app
                    mkdir -p trivy-output
                    docker run --rm \
                      -v /var/run/docker.sock:/var/run/docker.sock \
                      -v $(pwd)/trivy-output:/root/reports \
                      aquasec/trivy image goapp:latest \
                      --exit-code 0 \
                      --format table \
                      --output /root/reports/trivy-report.txt
                '''
                archiveArtifacts artifacts: 'trivy-output/trivy-report.txt', fingerprint: true
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo 'üìä Running SonarQube static code analysis...'
                dir('app') {
                    withSonarQubeEnv("${SONARQUBE_ENV}") {
                        sh '''
                            sonar-scanner \
                              -Dsonar.projectKey=go_project \
                              -Dsonar.sources=. \
                              -Dsonar.host.url=$SONAR_HOST_URL \
                              -Dsonar.login=$SONAR_AUTH_TOKEN
                        '''
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'üê≥ Building Docker image...'
                dir('app') {
                    sh 'docker build -t goapp:latest .'
                }
            }
        }

        stage('Push Docker Image to DockerHub') {
            steps {
                echo '‚òÅÔ∏è Pushing Docker image to DockerHub...'
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        docker login -u $DOCKER_USER -p $DOCKER_PASS
                        docker tag goapp:latest $DOCKER_USER/goapp:latest
                        docker push $DOCKER_USER/goapp:latest
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                echo 'üöÄ Deploying to Kubernetes...'
                dir('k8s') {
                    sh '''
                        kubectl apply -f deployment.yaml
                        kubectl apply -f service.yaml
                    '''
                }
            }
        }
    }
}