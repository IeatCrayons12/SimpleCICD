pipeline {
    agent any

    environment {
        SONARQUBE_ENV = 'SonarQube'
    }

    stages {

        stage('Setup Docker CLI') {
            steps {
                sh '''
                    if ! command -v docker > /dev/null; then
                        echo "üì¶ Installing Docker CLI..."
                        apt update && apt install -y docker.io
                        echo "‚úÖ Docker CLI installed."
                    else
                        echo "‚úîÔ∏è Docker CLI already exists."
                    fi
                '''
            }
        }

        stage('Checkout') {
            steps {
                echo 'üîÑ Cloning source code...'
                checkout scm
            }
        }

        stage('Run Unit Tests') {
            agent {
                docker {
                    image 'golang:1.20'
                }
            }
            steps {
                echo 'üß™ Running Go unit tests...'
                dir('app') {
                    sh 'go test ./... -v'
                }
            }
        }

        stage('OWASP Dependency Check') {
            steps {
                echo 'üîç Running OWASP Dependency Check...'
                sh """
                    docker run --rm \\
                      -v \$PWD/app:/src \\
                      -v \$PWD/app/odc-reports:/report \\
                      owasp/dependency-check \\
                      --project "goapp" \\
                      --scan /src \\
                      --format HTML \\
                      --out /report
                """
                archiveArtifacts artifacts: 'app/odc-reports/**/*.html', fingerprint: true
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo 'üìä Running SonarQube static code analysis...'
                dir('app') {
                    withSonarQubeEnv("${SONARQUBE_ENV}") {
                        sh """
                            sonar-scanner \\
                              -Dsonar.projectKey=go_project \\
                              -Dsonar.sources=. \\
                              -Dsonar.host.url=\$SONAR_HOST_URL \\
                              -Dsonar.login=\$SONAR_AUTH_TOKEN
                        """
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'üê≥ Building Docker image...'
                dir('app') {
                    sh 'docker build -t goapp:latest .'
                }
            }
        }

        stage('Push Docker Image to DockerHub') {
            steps {
                echo '‚òÅÔ∏è Pushing Docker image to DockerHub...'
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh """
                        docker login -u \$DOCKER_USER -p \$DOCKER_PASS
                        docker tag goapp:latest \$DOCKER_USER/goapp:latest
                        docker push \$DOCKER_USER/goapp:latest
                    """
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                echo 'üöÄ Deploying to Kubernetes...'
                dir('k8s') {
                    sh """
                        kubectl apply -f deployment.yaml
                        kubectl apply -f service.yaml
                    """
                }
            }
        }
    }
}
