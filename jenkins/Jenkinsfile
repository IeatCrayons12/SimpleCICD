pipeline {
    agent any

    environment {
        SONARQUBE_ENV = 'SonarQube'
    }

    stages {

        stage('Checkout') {
            steps {
                echo '🧹 Cleaning workspace before fresh checkout...'
                deleteDir()
                echo '🔄 Cloning source code...'
                checkout scm
            }
        }

        stage('Setup Docker CLI') {
            steps {
                sh '''
                    if ! command -v docker > /dev/null; then
                        echo "📦 Installing Docker CLI..."
                        apt update && apt install -y docker.io
                        echo "✅ Docker CLI installed."
                    else
                        echo "✔️ Docker CLI already exists."
                    fi
                '''
            }
        }

        stage('Run Unit Tests') {
            agent {
                docker {
                    image 'golang:1.24'
                }
            }
            steps {
                echo '🧪 Running Go unit tests...'
                checkout scm
                dir('app') {
                    sh 'go test ./... -v'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo '📊 Running SonarQube static code analysis...'
                dir('app') {
                    withSonarQubeEnv("${SONARQUBE_ENV}") {
                        sh '''
                            pwd
                            docker run --rm \
                              -v $(pwd):/usr/src \
                              -w /usr/src \
                              sonarsource/sonar-scanner-cli \
                              sonar-scanner \
                              -Dsonar.projectKey=go_project \
                              -Dsonar.sources=. \
                              -Dsonar.host.url=http://host.docker.internal:9000 \
                              -Dsonar.login=$SONAR_AUTH_TOKEN
                        '''
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo '🐳 Building Docker image...'
                dir('app') {
                    sh 'docker build -t goapp:latest .'
                }
            }
        }

        stage('Push Docker Image to DockerHub') {
            steps {
                echo '☁️ Pushing Docker image to DockerHub...'
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        docker login -u $DOCKER_USER -p $DOCKER_PASS
                        docker tag goapp:latest $DOCKER_USER/goapp:latest
                        docker push $DOCKER_USER/goapp:latest
                    '''
                }
            }
        }

        stage('Bootstrap Service Account') {
            steps {
                echo '🔐 Bootstrapping Kubernetes ServiceAccount...'
                sh '''
                      export KUBECONFIG=/var/jenkins_home/kubeconfig.yaml

                    echo "📁 KUBECONFIG Path: $KUBECONFIG"
                    echo "📋 Verifying current Kubernetes context..."
                    kubectl config current-context || {
                        echo "❌ Cannot get current Kubernetes context. Check kubeconfig." >&2
                        exit 1
                    }

                    echo "📡 Checking Kubernetes cluster connectivity..."
                    kubectl get nodes || {
                        echo "❌ Cannot connect to cluster. Is the cluster running? Authenticated?" >&2
                        exit 1
                    }

                    echo "📄 Applying service account YAML..."
                    kubectl apply -f k8s/jenkins-sa.yaml || {
                        echo "❌ Failed to apply ServiceAccount YAML." >&2
                        exit 1
                    }

                    echo "✅ Service Account applied successfully."`
                '''
            }
        }

        stage('Verify Helm & Cluster') {
            steps {
                echo '🔍 Verifying Helm and Kubernetes connectivity...'
                sh '''
                    if ! command -v helm > /dev/null; then
                        echo "❌ Helm not found. Installing..."
                        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
                        echo "✅ Helm installed."
                    else
                        echo "✔️ Helm already exists."
                        helm version
                    fi

                    if ! command -v kubectl > /dev/null; then
                        echo "❌ kubectl not found. Installing..."
                        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/arm64/kubectl"
                        chmod +x kubectl
                        mv kubectl /usr/local/bin/
                        echo "✅ kubectl installed."
                    else
                        echo "✔️ kubectl already exists."
                        kubectl version --client
                    fi

                    echo "🌐 Checking cluster connectivity..."
                    export KUBECONFIG=/var/jenkins_home/kubeconfig.yaml
                    kubectl get nodes
                '''
            }
        }

        stage('Deploy to Helm') {
            steps {
                echo '🚀 Deploying to Helm...'
                sh '''
                    helm upgrade --install goapp charts/goapp \
                    --namespace default \
                    --create-namespace \
                    --wait
                '''
            }
        }
    }
}
