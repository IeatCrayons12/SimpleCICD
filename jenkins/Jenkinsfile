pipeline {
    agent any

    environment {
        SONARQUBE_ENV = 'SonarQube'
    }

    stages {

        stage('Checkout') {
            steps {
                echo 'üßπ Cleaning workspace before fresh checkout...'
                deleteDir()
                echo 'üîÑ Cloning source code...'
                checkout scm
            }
        }

        stage('Setup Docker CLI') {
            steps {
                sh '''
                    if ! command -v docker > /dev/null; then
                        echo "üì¶ Installing Docker CLI..."
                        apt update && apt install -y docker.io
                        echo "‚úÖ Docker CLI installed."
                    else
                        echo "‚úîÔ∏è Docker CLI already exists."
                    fi
                '''
            }
        }

        stage('Run Unit Tests') {
            agent {
                docker {
                    image 'golang:1.24'
                }
            }
            steps {
                echo 'üß™ Running Go unit tests...'
                checkout scm
                dir('app') {
                    sh 'go test ./... -v'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo 'üìä Running SonarQube static code analysis...'
                dir('app') {
                    withSonarQubeEnv("${SONARQUBE_ENV}") {
                        sh '''
                            pwd
                            docker run --rm \
                              -v $(pwd):/usr/src \
                              -w /usr/src \
                              sonarsource/sonar-scanner-cli \
                              sonar-scanner \
                              -Dsonar.projectKey=go_project \
                              -Dsonar.sources=. \
                              -Dsonar.host.url=http://host.docker.internal:9000 \
                              -Dsonar.login=$SONAR_AUTH_TOKEN
                        '''
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'üê≥ Building Docker image...'
                dir('app') {
                    sh 'docker build -t goapp:latest .'
                }
            }
        }

        stage('Push Docker Image to DockerHub') {
            steps {
                echo '‚òÅÔ∏è Pushing Docker image to DockerHub...'
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        docker login -u $DOCKER_USER -p $DOCKER_PASS
                        docker tag goapp:latest $DOCKER_USER/goapp:latest
                        docker push $DOCKER_USER/goapp:latest
                    '''
                }
            }
        }

        stage('Deploy to Helm') {
            steps {
                echo 'üöÄ Deploying to Helm...'
                    sh '''
                    helm upgrade --install goapp charts/goapp \
                    --namespace default \
                    --create-namespace \
                    --wait
                    '''
            }
        }
    }
}